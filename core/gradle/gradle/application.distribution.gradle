// Application Plugin Settings and Hooks ///////////////////////////////////////

import java.util.regex.Matcher

apply plugin: "application"

applicationName = "syncany"
mainClassName = "org.syncany.Syncany"

startScripts {
	defaultJvmOpts = [ "-Dfile.encoding=utf-8" ]

	doLast {
		def defaultMaxMemory = "2048M"

		///// Windows batch files fixes/enhancements  /////
		def winFile = file getWindowsScript()

		// - Add lib/* to classpath
		winFile.text = winFile.text.replaceAll("(set CLASSPATH=.+)", 'set CLASSPATH=%APP_HOME%\\\\lib\\\\*;%AppData%\\\\Syncany\\\\plugins\\\\lib\\\\*')

		// - Read max memory (-Xmx) from userconfig.xml
		String winMaxMemoryCommands = "@rem Read max memory from userconfig.xml #SYNCANY_INCL_1#\r\n"
		winMaxMemoryCommands += "set APP_USERCONFIG_FILE=%AppData%\\\\Syncany\\\\userconfig.xml\r\n";
		winMaxMemoryCommands += "\r\n";
		winMaxMemoryCommands += "if exist \"%APP_USERCONFIG_FILE%\" (\r\n";
		winMaxMemoryCommands += "  if \"%OS%\"==\"Windows_NT\" setlocal ENABLEDELAYEDEXPANSION\r\n";
		winMaxMemoryCommands += "  set QT=^\"\r\n";
		winMaxMemoryCommands += "  for /F \"tokens=2,3,5 delims=<=>!QT!\" %%a in (%APP_USERCONFIG_FILE%) do ( \r\n";
		winMaxMemoryCommands += "    if \"%%a\" equ \"maxMemory\" set APP_MAX_MEMORY=%%b\r\n";
		winMaxMemoryCommands += "  )\r\n";
		winMaxMemoryCommands += ")\r\n";
		winMaxMemoryCommands += "\r\n";
		winMaxMemoryCommands += "if defined APP_MAX_MEMORY (\r\n";
		winMaxMemoryCommands += "  set DEFAULT_JVM_OPTS=%DEFAULT_JVM_OPTS% \"-Xmx%APP_MAX_MEMORY%\"\r\n";
		winMaxMemoryCommands += ") else (\r\n";
		winMaxMemoryCommands += "  set DEFAULT_JVM_OPTS=%DEFAULT_JVM_OPTS% \"-Xmx" + defaultMaxMemory + "\"\r\n";
		winMaxMemoryCommands += ")";

		winFile.text = winFile.text.replaceAll("(set DEFAULT_JVM_OPTS.+)", '$1' + Matcher.quoteReplacement("\r\n\r\n${winMaxMemoryCommands}"))

		// - Post Java process commands: Delayed plugin JAR file deletion (Windows only)
		String winPurgeFileDeletionCommands = "@rem Delete plugin JARs #SYNCANY_INCL_2#\r\n"
		winPurgeFileDeletionCommands += "SET PURGEFILE=%AppData%\\\\Syncany\\\\purgefile\r\n";
		winPurgeFileDeletionCommands += "if exist %PURGEFILE% (\r\n";
		winPurgeFileDeletionCommands += "  @for /f %%b in (%PURGEFILE%) do del /q \"%%b\" 2>NUL\r\n";
		winPurgeFileDeletionCommands += "  del /q %PURGEFILE% 2>NUL\r\n";
		winPurgeFileDeletionCommands += ")\r\n\r\n";

		winFile.text = winFile.text.replaceAll("(:end)", "${winPurgeFileDeletionCommands}:end")

		// - Post Java process commands: Delayed plugin JAR file install (Windows only)
		String winUpdateFileCommands = "@rem Reinstall plugins after update removal #SYNCANY_INCL_4#\r\n"
		winUpdateFileCommands += "SET UPDATEFILE=%AppData%\\\\Syncany\\\\updatefile\r\n";
		winUpdateFileCommands += "if exist %UPDATEFILE% (\r\n";
		winUpdateFileCommands += "  @for /f %%b in (%UPDATEFILE%) do (\r\n    <nul set /p =Updating %%b... \r\n    \"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %SYNCANY_OPTS%  -classpath \"%CLASSPATH%\" org.syncany.Syncany plugin install %%b -m 2>NUL)\r\n";
		winUpdateFileCommands += "  del /q %UPDATEFILE% 2>NUL\r\n";
		winUpdateFileCommands += ")\r\n\r\n";

		winFile.text = winFile.text.replaceAll("(:end)", "${winUpdateFileCommands}:end")

		// - Append daemon batch script (handle 'sy daemon'); contains #SYNCANY_INCL_3#
		def winTextTmp = ""
		def winText = winFile.text
		def windowsDaemonScript = new File("${rootProject.projectDir}/gradle/daemon/syncanyd.bat.skel").text

		winText.readLines().each {
			line ->
				if (line.startsWith("\"%JAVA_EXE%\"")) {
					winTextTmp += "if \"%1\" == \"daemon\" goto daemon" + "\r\n"
					winTextTmp += line + "\r\n"
					winTextTmp += "goto afterdaemon" + "\r\n"

					winTextTmp += "\r\n"
					winTextTmp += ":daemon" + "\r\n"
					winTextTmp += windowsDaemonScript + "\r\n"

					winTextTmp += "\r\n"
					winTextTmp += ":afterdaemon" + "\r\n"
				}
				else {
					winTextTmp += line + '\n'
				}
		}

		winFile.text = winTextTmp

		// - Double check that all replaces were successful
		if (!winFile.text.contains("#SYNCANY_INCL_1#") || !winFile.text.contains("#SYNCANY_INCL_2#") ||
		    !winFile.text.contains("#SYNCANY_INCL_3#") || !winFile.text.contains("#SYNCANY_INCL_4#")) {

			throw new RuntimeException("Windows shell script creation failed.");
		}


		///// Linux/Unix script fixes/enhancements /////
		def unixFile = file getUnixScript()

		// - Read max memory (-Xmx) from userconfig.xml
		String forceSwtGtk2Commands = "# Force SWT/GTK2 (workaround until SWT/GTK3 tables work right) #SYNCANY_INCL_1#\n"
		forceSwtGtk2Commands += "SWT_GTK3=0\n";

		unixFile.text = unixFile.text.replaceAll("(DEFAULT_JVM_OPTS=.+)", '$0' + Matcher.quoteReplacement("\n\n${forceSwtGtk2Commands}"))

		// - Read max memory (-Xmx) from userconfig.xml
		String unixMaxMemoryCommands = "# Read max memory from userconfig.xml #SYNCANY_INCL_2#\n"
		unixMaxMemoryCommands += "APP_USERCONFIG_DIR=~/.config/syncany\n";
		unixMaxMemoryCommands += "APP_USERCONFIG_FILE=\$APP_USERCONFIG_DIR/userconfig.xml\n";
		unixMaxMemoryCommands += "\n";
		unixMaxMemoryCommands += "if [ -f \$APP_USERCONFIG_FILE ]; then\n";
		unixMaxMemoryCommands += "    APP_MAX_MEMORY=\$(cat \$APP_USERCONFIG_FILE | sed -n 's/.*<maxMemory>\\([^<]*\\)<\\/maxMemory>.*/\\1/p')\n";
		unixMaxMemoryCommands += "fi\n";
		unixMaxMemoryCommands += "\n";
		unixMaxMemoryCommands += "if [ -z \"\$APP_MAX_MEMORY\" ]; then\n";
		unixMaxMemoryCommands += "    DEFAULT_JVM_OPTS=\"\$DEFAULT_JVM_OPTS \\\"-Xmx" + defaultMaxMemory + "\\\"\"\n";
		unixMaxMemoryCommands += "else\n";
		unixMaxMemoryCommands += "    DEFAULT_JVM_OPTS=\"\$DEFAULT_JVM_OPTS \\\"-Xmx\$APP_MAX_MEMORY\\\"\"\n";
		unixMaxMemoryCommands += "fi";

		unixFile.text = unixFile.text.replaceAll("(DEFAULT_JVM_OPTS=.+)", '$0' + Matcher.quoteReplacement("\n\n${unixMaxMemoryCommands}"))

		// - Mac OS X: Add -XstartOnFirstThread (to fix SWT)
		String unixDarwinFirstThreadFlagCommands = "# For Darwin / Mac OS X: Add -XstartOnFirstThread (to fix SWT) #SYNCANY_INCL_3#\n"
		unixDarwinFirstThreadFlagCommands += "if \$darwin; then\n"
		unixDarwinFirstThreadFlagCommands += "    DEFAULT_JVM_OPTS=\"\$DEFAULT_JVM_OPTS \\\"-XstartOnFirstThread\\\"\"\n";
		unixDarwinFirstThreadFlagCommands += "fi"

		unixFile.text = unixFile.text.replaceAll("(CLASSPATH=\\\$APP_HOME.+)", '$0' + Matcher.quoteReplacement("\n\n${unixDarwinFirstThreadFlagCommands}"))

		// - Add lib/* to classpath
		String unixClassPathCommands = "# Determine CLASSPATH (with user plugin JAR preference) #SYNCANY_INCL_4#\n"
		unixClassPathCommands += "CLASSPATH=\"\$APP_USERCONFIG_DIR/plugins/lib/*\"\n"
		unixClassPathCommands += "LIBS_GLOBAL=\$(ls \$APP_HOME/lib/*.jar)\n"
		unixClassPathCommands += "LIBS_PLUGINS_GLOBAL=\$(ls \$APP_HOME/lib/syncany-plugin-*.jar 2> /dev/null)\n"
		unixClassPathCommands += "\n"
		unixClassPathCommands += "for LIB_GLOBAL in \$LIBS_GLOBAL; do\n"
		unixClassPathCommands += "	LIB_GLOBAL_BASENAME=\$(basename \$LIB_GLOBAL)\n"
		unixClassPathCommands += "\n"
		unixClassPathCommands += "	if [[ \$LIB_GLOBAL_BASENAME == syncany-plugin-*.jar ]]; then\n"
		unixClassPathCommands += "		PLUGIN_JAR_PREFIX=\$(expr match \"\$LIB_GLOBAL_BASENAME\" '\\(syncany-plugin-[^-]*-\\)')\n"
		unixClassPathCommands += "		IN_USER_PLUGINS=\$(ls \$APP_USERCONFIG_DIR/plugins/lib/\$PLUGIN_JAR_PREFIX*.jar 2> /dev/null)\n"
		unixClassPathCommands += "\n"
		unixClassPathCommands += "		if [ -z \"\$IN_USER_PLUGINS\" ]; then\n"
		unixClassPathCommands += "			CLASSPATH=\"\$CLASSPATH:\$LIB_GLOBAL\"\n"
		unixClassPathCommands += "		fi\n"
		unixClassPathCommands += "	else\n"
		unixClassPathCommands += "		CLASSPATH=\"\$CLASSPATH:\$LIB_GLOBAL\"\n"
		unixClassPathCommands += "	fi\n"
		unixClassPathCommands += "done"

		unixFile.text = unixFile.text.replaceAll("(CLASSPATH=\\\$APP_HOME.+)", Matcher.quoteReplacement("${unixClassPathCommands}"))

		// - Append daemon batch script (handle 'sy daemon'); contains #SYNCANY_INCL_5#
		def unixTextTmp = ""
		def unixText = unixFile.text
		def unixDaemonScript = new File("${rootProject.projectDir}/gradle/daemon/syncanyd.skel").text

		unixText.readLines().each {
			line ->
				if (line.startsWith("exec")) {
					unixTextTmp += unixDaemonScript.replace("#JAVA_EXEC_REPLACEMENT_MARKER#", line);
				}
				else {
					unixTextTmp += line + '\n'
				}
		}

		unixFile.text = unixTextTmp

		// - Double check that all replaces were successful
		if (!unixFile.text.contains("#SYNCANY_INCL_1#") || !unixFile.text.contains("#SYNCANY_INCL_2#") ||
		    !unixFile.text.contains("#SYNCANY_INCL_3#") || !unixFile.text.contains("#SYNCANY_INCL_4#") ||
		    !unixFile.text.contains("#SYNCANY_INCL_5#")) {

			throw new RuntimeException("Unix/Linux shell script creation failed.");
		}
	}
}

applicationDistribution.from("${rootProject.projectDir}/") {
	include "AUTHORS.md", "CHANGELOG.md", "LICENSE.md", "README.md"

	// Copy syncany(.bat) to sy(.bat)
	from("${startScripts.outputDir}/") {
		include "syncany*"
		rename(/syncany(\.bat)?/, 'sy$1')
		into "bin"
	}
}

distTar {
	baseName = "syncany"
	version = "$applicationVersionFull"
	compression = Compression.GZIP
	extension = "tar.gz"

	doLast {
		copy {
			from archivePath
			into rootProject.file("${buildDir}/upload")
		}
	}
}

distZip {
	baseName = "syncany"
	version = "$applicationVersionFull"

	doLast {
		copy {
			from archivePath
			into rootProject.file("${buildDir}/upload")
		}
	}
}

